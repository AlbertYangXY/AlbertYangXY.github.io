(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{371:function(e,r,s){"use strict";s.r(r);var t=s(0),v=Object(t.a)({},(function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"nodeports，loadbalancer，ingress的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodeports，loadbalancer，ingress的区别"}},[e._v("#")]),e._v(" NodePorts，LoadBalancer，Ingress的区别")]),e._v(" "),s("p",[e._v("2020/3/31 12:14:15")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("NodePorts，LoadBalancer和 Ingress 之间的区别是什么？它们是将外部流量引入集群的不同方式，而且它们的运行形式各不相同。")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://kubernetes.io/docs/concepts/services-networking/service/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://kubernetes.io/docs/concepts/services-networking/service/"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"clusterip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clusterip"}},[e._v("#")]),e._v(" ClusterIP")]),e._v(" "),s("p",[e._v("ClusterIP 是默认的 Kubernetes service 类型。有了它，集群内部的应用程序可以相互访问，但集群外部的应用程序不行。")]),e._v(" "),s("p",[e._v("ClusterIP service 的 YAML 如下图所示：\n"),s("img",{attrs:{src:"https://i.imgur.com/2lz8rlj.jpg",alt:""}})]),e._v(" "),s("p",[e._v("如果你都不能通过公网访问 ClusterIP service，那我为什么要提它呢？因为你可以使用 Kubernetes proxy 来访问它！\n"),s("img",{attrs:{src:"https://i.imgur.com/xweomtF.jpg",alt:""}}),e._v("\n启动 Kubernetes proxy：")]),e._v(" "),s("p",[e._v("现在，您就可以使用下面这个scheme 通过 Kubernetes API 访问 service 了：")]),e._v(" "),s("p",[e._v("http://localhost:8080/api/v1/proxy/namespaces//services/:")]),e._v(" "),s("p",[e._v("/")]),e._v(" "),s("p",[e._v("所以，你可以使用下面这个地址，访问我们上面定义的 service：")]),e._v(" "),s("p",[e._v("http://localhost:8080/api/v1/proxy/namespaces/default/services/my-internal-service:http/")]),e._v(" "),s("p",[e._v("这种类型的 service 什么时候适用？")]),e._v(" "),s("p",[e._v("我列出以下几种可以让你使用 Kubernetes proxy 来访问这个 service 的情况：")]),e._v(" "),s("p",[e._v("调试你的 service，或直接从笔记本电脑连接到 service；")]),e._v(" "),s("p",[e._v("允许内部流量访问，显示内部 dashboards 等。")]),e._v(" "),s("p",[e._v("由于此方法要求你将 kubectl 作为认证用户运行，因此你不能使用这个方法将你的 service 暴露在公网上或将其用于生产环境下。")]),e._v(" "),s("h2",{attrs:{id:"nodeport"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodeport"}},[e._v("#")]),e._v(" NodePort")]),e._v(" "),s("p",[e._v("NodePort 类型的 service 是让外部流量可以访问集群内部服务最基本的方式。NodePort， 顾名思义可以在所有 Node（VM）上打开一个特定的 port，任何发送到此 port 的流量都将转发到 service 上。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/pbKyHC6.jpg",alt:""}})]),e._v(" "),s("p",[e._v("从技术上看，这也许不是最准确的图表，但它表明了 NodePort 的工作方式\nNodePort 类型的 service 的 YAML 如下所示：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/QNZVFuu.jpg",alt:""}})]),e._v(" "),s("p",[e._v("NodePort 类型的 service 与普通的 “ClusterIP” 类型的 service 有两点区别：")]),e._v(" "),s("p",[e._v("它的类型是 “NodePort”；")]),e._v(" "),s("p",[e._v("它有一个被称为 nodePort 的附加 port，可以在 node 上指定打开哪个 port 。如果你不指定一个 port，NodePort 类型的 service 就会随机选择一个。大多数时候你应该让 Kubernetes 来选择 port; 正如 thockin 所说：“有许多提示可以告诉你应该使用哪些 port。”")]),e._v(" "),s("p",[e._v("这种类型的 service 什么时候适用？")]),e._v(" "),s("p",[e._v("这种方法有一些缺点：")]),e._v(" "),s("p",[e._v("每个端口只能绑定一个 service；")]),e._v(" "),s("p",[e._v("可使用端口号只能是 30000 到 32767；")]),e._v(" "),s("p",[e._v("如果你的 Node/虚拟机 IP 地址发生更改，你必须自己处理。")]),e._v(" "),s("p",[e._v("由于上述原因，我不建议在生产中使用这种方法来直接暴露你的服务。如果你运行的服务不用保持始终可用，或者您非常关注成本，那么这个方法就适用于你。这样的应用程序在我看来只适用于一个演示应用程序或其他临时的东西。")]),e._v(" "),s("h2",{attrs:{id:"loadbalancer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loadbalancer"}},[e._v("#")]),e._v(" LoadBalancer")]),e._v(" "),s("p",[e._v("LoadBalancer （负载均衡器）类型的 service 是在公网上暴露服务的标准方式。在 GKE 上，这将启动一个网络LoadBalancer，该网络LoadBalancer将为你提供一个 IP 地址，用来将所有流量转发到你的 service 上。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/tFmjSPA.jpg",alt:""}})]),e._v(" "),s("p",[e._v("这种类型的 service 什么时候适用？")]),e._v(" "),s("p",[e._v("如果你想直接暴露一个 service，这是一种默认的方法。你指定的 port 上的所有流量都将被转发到这个 service 上，没有过滤，没有路由等。这意味着你几乎可以发送如 HTTP，TCP，UDP，Websockets，gRPC 等任何类型的流量。")]),e._v(" "),s("p",[e._v("最大的缺点就是：你使用LoadBalancer暴露的每个 service 都将获得自己的 IP 地址，而你必须为每个暴露的 service 配置一个LoadBalancer，这成本就非常高了。")]),e._v(" "),s("h2",{attrs:{id:"ingress"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ingress"}},[e._v("#")]),e._v(" Ingress")]),e._v(" "),s("p",[e._v("与以上所有例子不同，Ingress 实际上不是 service 的一个类型。相反，它位于多个 service 之前，充当集群中的“智能路由器”或入口点。您可以使用 Ingress 做很多不同的事情。现在市面上有许多不同类型的 Ingress 控制器，他们具有不同的功能。")]),e._v(" "),s("p",[e._v("默认的 GKE ingress 控制器将为你启动一个 HTTP（S）LoadBalancer。帮助你用来执行基于路径和子域的路由到后端服务。例如，你可以将 foo.yourdomain.com 上的所有内容发送到 foo service 上，将yourdomain.com/bar/ 路径下所有内容发送到 bar service 上。")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/aicl2Sj.jpg",alt:""}})]),e._v(" "),s("p",[e._v("GKE 上 Ingress 对象的 YAML 如下所示（带有 L7 HTTPLoadBalancer）：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://i.imgur.com/Msrj2R8.jpg",alt:""}})]),e._v(" "),s("p",[e._v("适用情况")]),e._v(" "),s("p",[e._v("Ingress 可能是暴露 service 最强大的方式，但也可能是最复杂的。其实，Ingress 控制器有很多类型，像来自 Google Cloud 的LoadBalancer，Nginx，Contour，Istio 等。还有用于 Ingress 控制器的插件，如 cert-manager，它可以为你的 service 自动提供 SSL 证书。")]),e._v(" "),s("p",[e._v("如果你希望在相同的 IP 地址下暴露多个 service，并且这些 service 都使用相同的 L7 协议（通常是 HTTP）。毫无疑问，Ingress 是最有用的。如果你使用本地 GCP 集成，那你只需使用一台负载均衡器。由于 Ingress 是“智能的”，您可以获得许多“开箱即用”的功能，如 SSL，Auth，路由等。")])])}),[],!1,null,null,null);r.default=v.exports}}]);